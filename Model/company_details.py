from sqlalchemy import Boolean, Column, Float, Integer, String, Text
from Model.base import Base

class Company_Details(Base):
    '''
    Company Details table class creation.

    Columns: 
        TODO: Add the column names and short description.
    '''

    __tablename__ = 'CompanyDetails'
    '''
    The name of the table that will be registered on the Database.
    '''

    companyDetailsId = Column(Integer, primary_key=True, nullable=False)
    tickerId = Column(Integer, unique=True, nullable=False)
    sector = Column(String)
    industry = Column(String)
    fullTimeEmployees = Column(Integer)
    longBusinessSummary = Column(Text)
    city = Column(String)
    state = Column(String)
    country = Column(String)
    website = Column(String)
    ebitdaMargins = Column(Float)
    profitMargins = Column(Float)
    grossMargins = Column(Float)
    operatingCashflow = Column(Integer)
    revenueGrowth = Column(Float)
    operatingMargins = Column(Float)
    ebitda = Column(Integer)
    targetLowPrice = Column(Integer)
    grossProfits = Column(Integer)
    freeCashflow = Column(Integer)
    targetMedianPrice = Column(Integer)
    currentPrice = Column(Float)
    earningsGrowth = Column(Float)
    currentRatio = Column(Float)
    returnOnAssets = Column(Float)
    numberOfAnalystOpinions = Column(Integer)
    targetMeanPrice = Column(Float)
    debtToEquity = Column(Float)
    returnOnEquity = Column(Float)
    targetHighPrice = Column(Integer)
    totalCash = Column(Integer)
    totalDebt = Column(Integer)
    totalRevenue = Column(Integer)
    totalCashPerShare = Column(Float)
    financialCurrency = Column(String)
    revenuePerShare = Column(Float)
    quickRatio = Column(Float)
    recommendationMean = Column(Float)
    exchange = Column(String)
    shortName = Column(String)
    longName = Column(String)
    exchangeTimezoneName = Column(String)
    exchangeTimezoneShortName = Column(String)
    quoteType = Column(String)
    symbol = Column(String)
    messageBoardId = Column(String)
    market = Column(String)
    annualHoldingsTurnover = Column(Float)
    enterpriseToRevenue = Column(Float)
    enterpriseToEbitda = Column(Float)
    _52WeekChange = Column(Float)
    forwardEps = Column(Float)
    revenueQuarterlyGrowth = Column(Float)
    sharesOutstanding = Column(Integer)
    annualReportExpenseRatio = Column(Float)
    totalAssets = Column(Integer)
    bookValue = Column(Float)
    sharesShort = Column(Integer)
    sharesPercentSharesOut = Column(Float)
    lastFiscalYearEnd = Column(Integer)
    heldPercentInstitutions = Column(Float)
    netIncomeToCommon = Column(Integer)
    trailingEps = Column(Float)
    lastDividendValue = Column(Float)
    SandP52WeekChange = Column(Float)
    priceToBook = Column(Float)
    heldPercentInsiders = Column(Float)
    nextFiscalYearEnd = Column(Integer)
    mostRecentQuarter = Column(Integer)
    shortRatio = Column(Float)
    sharesShortPreviousMonthDate = Column(Integer)
    floatShares = Column(Integer)
    beta = Column(Float)
    enterpriseValue = Column(Integer)
    priceHint = Column(Integer)
    lastSplitDate = Column(Integer)
    lastSplitFactor = Column(String)
    lastDividendDate = Column(Integer)
    earningsQuarterlyGrowth = Column(Float)
    priceToSalesTrailing12Months = Column(Float)
    dateShortInterest = Column(Integer)
    pegRatio = Column(Float)
    forwardPE = Column(Float)
    shortPercentOfFloat = Column(Float)
    sharesShortPriorMonth = Column(Integer)
    impliedSharesOutstanding = Column(Integer)
    category = Column(String)
    previousClose = Column(Float)
    regularMarketOpen = Column(Float)
    twoHundredDayAverage = Column(Float)
    trailingAnnualDividendYield = Column(Float)
    payoutRatio = Column(Float)
    regularMarketDayHigh = Column(Float)
    averageDailyVolume10Day = Column(Integer)
    regularMarketPreviousClose = Column(Float)
    fiftyDayAverage = Column(Float)
    trailingAnnualDividendRate = Column(Float)
    open = Column(Float)
    averageVolume10days = Column(Integer)
    dividendRate = Column(Float)
    exDividendDate = Column(Integer)
    regularMarketDayLow = Column(Float)
    currency = Column(String)
    trailingPE = Column(Float)
    regularMarketVolume = Column(Integer)
    marketCap = Column(Integer)
    averageVolume = Column(Integer)
    dayLow = Column(Float)
    ask = Column(Float)
    askSize = Column(Integer)
    volume = Column(Integer)
    fiftyTwoWeekHigh = Column(Float)
    fiveYearAvgDividendYield = Column(Float)
    fiftyTwoWeekLow = Column(Float)
    tradeable = Column(Boolean)
    dividendYield = Column(Float)
    bidSize = Column(Integer)
    dayHigh = Column(Float)
    regularMarketPrice = Column(Float)

    def __repr__(self):
        return(f'Company_Details(companyDetailsId={self.companyDetailsId!r},'
                f'tickerId={self.tickerId!r},'
                f'sector={self.sector!r},'
                f'industry={self.industry!r},'
                f'fullTimeEmployees={self.fullTimeEmployees!r},'
                f'longBusinessSummary={self.longBusinessSummary!r},'
                f'city={self.city!r},'
                f'state={self.state!r},'
                f'country={self.country!r},'
                f'website={self.website!r},'
                f'ebitdaMargins={self.ebitdaMargins!r},'
                f'profitMargins={self.profitMargins!r},'
                f'grossMargins={self.grossMargins!r},'
                f'operatingCashflow={self.operatingCashflow!r},'
                f'revenueGrowth={self.revenueGrowth!r},'
                f'operatingMargins={self.operatingMargins!r},'
                f'ebitda={self.ebitda!r},'
                f'targetLowPrice={self.targetLowPrice!r},'
                f'grossProfits={self.grossProfits!r},'
                f'freeCashflow={self.freeCashflow!r},'
                f'targetMedianPrice={self.targetMedianPrice!r},'
                f'currentPrice={self.currentPrice!r},'
                f'earningsGrowth={self.earningsGrowth!r},'
                f'currentRatio={self.currentRatio!r},'
                f'returnOnAssets={self.returnOnAssets!r},'
                f'numberOfAnalystOpinions={self.numberOfAnalystOpinions!r},'
                f'targetMeanPrice={self.targetMeanPrice!r},'
                f'debtToEquity={self.debtToEquity!r},'
                f'returnOnEquity={self.returnOnEquity!r},'
                f'targetHighPrice={self.targetHighPrice!r},'
                f'totalCash={self.totalCash!r},'
                f'totalDebt={self.totalDebt!r},'
                f'totalRevenue={self.totalRevenue!r},'
                f'totalCashPerShare={self.totalCashPerShare!r},'
                f'financialCurrency={self.financialCurrency!r},'
                f'revenuePerShare={self.revenuePerShare!r},'
                f'quickRatio={self.quickRatio!r},'
                f'recommendationMean={self.recommendationMean!r},'
                f'exchange={self.exchange!r},'
                f'shortName={self.shortName!r},'
                f'longName={self.longName!r},'
                f'exchangeTimezoneName={self.exchangeTimezoneName!r},'
                f'exchangeTimezoneShortName={self.exchangeTimezoneShortName!r},'
                f'quoteType={self.quoteType!r},'
                f'symbol={self.symbol!r},'
                f'messageBoardId={self.messageBoardId!r},'
                f'market={self.market!r},'
                f'annualHoldingsTurnover={self.annualHoldingsTurnover!r},'
                f'enterpriseToRevenue={self.enterpriseToRevenue!r},'
                f'enterpriseToEbitda={self.enterpriseToEbitda!r},'
                f'_52WeekChange={self._52WeekChange!r},'
                f'forwardEps={self.forwardEps!r},'
                f'revenueQuarterlyGrowth={self.revenueQuarterlyGrowth!r},'
                f'sharesOutstanding={self.sharesOutstanding!r},'
                f'annualReportExpenseRatio={self.annualReportExpenseRatio!r},'
                f'totalAssets={self.totalAssets!r},'
                f'bookValue={self.bookValue!r},'
                f'sharesShort={self.sharesShort!r},'
                f'sharesPercentSharesOut={self.sharesPercentSharesOut!r},'
                f'lastFiscalYearEnd={self.lastFiscalYearEnd!r},'
                f'heldPercentInstitutions={self.heldPercentInstitutions!r},'
                f'netIncomeToCommon={self.netIncomeToCommon!r},'
                f'trailingEps={self.trailingEps!r},'
                f'lastDividendValue={self.lastDividendValue!r},'
                f'SandP52WeekChange={self.SandP52WeekChange!r},'
                f'priceToBook={self.priceToBook!r},'
                f'heldPercentInsiders={self.heldPercentInsiders!r},'
                f'nextFiscalYearEnd={self.nextFiscalYearEnd!r},'
                f'mostRecentQuarter={self.mostRecentQuarter!r},'
                f'shortRatio={self.shortRatio!r},'
                f'sharesShortPreviousMonthDate={self.sharesShortPreviousMonthDate!r},'
                f'floatShares={self.floatShares!r},'
                f'beta={self.beta!r},'
                f'enterpriseValue={self.enterpriseValue!r},'
                f'priceHint={self.priceHint!r},'
                f'lastSplitDate={self.lastSplitDate!r},'
                f'lastSplitFactor={self.lastSplitFactor!r},'
                f'lastDividendDate={self.lastDividendDate!r},'
                f'earningsQuarterlyGrowth={self.earningsQuarterlyGrowth!r},'
                f'priceToSalesTrailing12Months={self.priceToSalesTrailing12Months!r},'
                f'dateShortInterest={self.dateShortInterest!r},'
                f'pegRatio={self.pegRatio!r},'
                f'forwardPE={self.forwardPE!r},'
                f'shortPercentOfFloat={self.shortPercentOfFloat!r},'
                f'sharesShortPriorMonth={self.sharesShortPriorMonth!r},'
                f'impliedSharesOutstanding={self.impliedSharesOutstanding!r},'
                f'category={self.category!r},'
                f'previousClose={self.previousClose!r},'
                f'regularMarketOpen={self.regularMarketOpen!r},'
                f'twoHundredDayAverage={self.twoHundredDayAverage!r},'
                f'trailingAnnualDividendYield={self.trailingAnnualDividendYield!r},'
                f'payoutRatio={self.payoutRatio!r},'
                f'regularMarketDayHigh={self.regularMarketDayHigh!r},'
                f'averageDailyVolume10Day={self.averageDailyVolume10Day!r},'
                f'regularMarketPreviousClose={self.regularMarketPreviousClose!r},'
                f'fiftyDayAverage={self.fiftyDayAverage!r},'
                f'trailingAnnualDividendRate={self.trailingAnnualDividendRate!r},'
                f'open={self.open!r},'
                f'averageVolume10days={self.averageVolume10days!r},'
                f'dividendRate={self.dividendRate!r},'
                f'exDividendDate={self.exDividendDate!r},'
                f'regularMarketDayLow={self.regularMarketDayLow!r},'
                f'currency={self.currency!r},'
                f'trailingPE={self.trailingPE!r},'
                f'regularMarketVolume={self.regularMarketVolume!r},'
                f'marketCap={self.marketCap!r},'
                f'averageVolume={self.averageVolume!r},'
                f'dayLow={self.dayLow!r},'
                f'ask={self.ask!r},'
                f'askSize={self.askSize!r},'
                f'volume={self.volume!r},'
                f'fiftyTwoWeekHigh={self.fiftyTwoWeekHigh!r},'
                f'fiveYearAvgDividendYield={self.fiveYearAvgDividendYield!r},'
                f'fiftyTwoWeekLow={self.fiftyTwoWeekLow!r},'
                f'tradeable={self.tradeable!r},'
                f'dividendYield={self.dividendYield!r},'
                f'bidSize={self.bidSize!r},'
                f'dayHigh={self.dayHigh!r},'
                f'regularMarketPrice={self.regularMarketPrice!r})'
            )
